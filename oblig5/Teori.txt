%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Oppg 5.2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
a) Innkapsling er en maate aa separere klasser fra ytre programmer.
   Alle metodene inne i klassen kan kan endre og lese av en 
   variabel, mens ytre programmer maa kalle en metode paa et objekt for 
   aa lese den av. Det er en fin maate aa forebygge feil paa ved at en bruker 
   maa direkte lage kode for aa faa tak i variabelen istedet for 
   at dette gjoeres ved en feil.

b) Grensesnittet til en klasse er maaten klassen og metodene i den skal brukes
   paa. Implementasjonen er maaten klassen er programmert paa.  

c) Vi ser p√• klassen som en generell oppskrift for aa representere noe. klassen
   har en rekke metoder som gjoer noe. Vi kan lage et objekt av klassen ved aa 
   kalle paa den. Da har vi laget en instanse A. Vi kan lage enda et objekt av 
   klassen og faar en ny instanse B. Begge disse instansene kan kjoere metodene
   i klassen, og naar de gjoer det saa er dette instansemetodene.  

   Statiske metoder er felles for hele klassen uavhengig av hvilke
   objekter som lages av klassen. Da trengs det ikke aa lages et 
   objekt av klassen.

   EKSEMPEL PAA INSTANSEMETODE FRA OPPGAVE 5.1:
   ---------------------------------------------------
   Bil BMW = new Bil();  Instanse 1 av klassen
   Bil Kia = new Bil();	 Instanse 2 av klassen

   BMW.kjorTur(20);      Instansemetode av 1
   Kia.kjorTur(3);	 Instansemetode av 2

   EKSEMPEL PAA STATISK METODE
   ---------------------------------------------------
   System.out.println("Statisk")

   Har gjort et kall paa klassen System direkte og kjort metoden
   println uten aa lage et objekt forst.

   

   
   
   
      
